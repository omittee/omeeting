//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: String,
  pub password: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::room::Entity")]
  Room,
  #[sea_orm(has_many = "super::room_user::Entity")]
  RoomUser,
}

impl Related<super::room::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Room.def()
  }
}

impl Related<super::room_user::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::RoomUser.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
