//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "room")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
  pub code: String,
  pub is_canceled: bool,
  pub record_videos: String,
  pub start_time: DateTime,
  pub end_time: DateTime,
  pub admin: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::room_user::Entity")]
  RoomUser,
  #[sea_orm(
    belongs_to = "super::user::Entity",
    from = "Column::Admin",
    to = "super::user::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  User,
}

impl Related<super::room_user::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::RoomUser.def()
  }
}

impl Related<super::user::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::User.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
